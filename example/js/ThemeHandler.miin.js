export class ThemeHandler{constructor(light_mode,night_mode){this.light=light_mode;this.night=night_mode;this.control_mode=window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches;this.mode_dark="night";this.mode_white="light"this.theme_mode=this.mode_white;this.detectTheme()}Background=(dom,color)=>{let dom_arr=document.querySelectorAll(dom);dom_arr.forEach((elem)=>{elem.style.backgroundColor=color})}FontColor=(dom,color)=>{let dom_arr=document.querySelectorAll(dom);dom_arr.forEach((elem)=>{elem.style.color=color})}themeHandler=(bg_handler,ft_handler)=>{bg_handler.map((mode)=>{`${this.Background(mode.elem,mode.color)}`});ft_handler.map((mode)=>{`${this.FontColor(mode.elem,mode.color)}`})}detectTheme=()=>{if(this.control_mode===true){this.themeHandler(this.night.background,this.night.font);this.theme_mode=this.mode_white}else{this.themeHandler(this.light.background,this.light.font);this.theme_mode=this.mode_dark}}autoDetect=()=>{window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change',()=>{this.control_mode=window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches;if(this.control_mode===true){this.themeHandler(this.night.background,this.night.font);this.theme_mode=this.mode_white}else{this.themeHandler(this.light.background,this.light.font);this.theme_mode=this.mode_dark}})}currentMode=()=>{if(this.theme_mode===this.mode_white){return this.mode_dark}else{return this.mode_white}}changeTheme=(theme_mode)=>{if(theme_mode===this.mode_white){this.themeHandler(this.light.background,this.light.font);this.theme_mode=this.mode_dark}else if(theme_mode===this.mode_dark){this.themeHandler(this.night.background,this.night.font);this.theme_mode=this.mode_white}else{console.error(`error,theme mode is support only ${this.mode_white}or ${this.mode_dark}`)console.warn(`ex)handler.changeTheme('${this.mode_white}'or'${this.mode_dark}')`)}}}
